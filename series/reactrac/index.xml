<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React，RAC on 拾忆</title>
    <link>http://huanghg.github.io/series/reactrac/</link>
    <description>Recent content in React，RAC on 拾忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 30 Dec 2019 17:56:32 +0800</lastBuildDate>
    
	<atom:link href="http://huanghg.github.io/series/reactrac/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ReactiveCocoa代码浅析&lt;二&gt;</title>
      <link>http://huanghg.github.io/posts/20191230reactivecocoa2/</link>
      <pubDate>Mon, 30 Dec 2019 17:56:32 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20191230reactivecocoa2/</guid>
      <description>看merge之前，我们先看一下flatten
flatten //以下是merge另外的一种实现 - (void)flattenDemo { RACSubject *letters = [RACSubject subject]; RACSubject *numbers = [RACSubject subject]; //创建信号数组，当flattened信号subscribeNext的时候，会在其内部触发signalOfSignals的subscribeNext  //当[subscriber sendNext:letters];时，会把letters这个signal传递到里面去，会添加到flattened的一个数组中，并建立letters的subscribeNext  RACSignal *signalOfSignals = [RACSignal createSignal:^ RACDisposable * (id&amp;lt;RACSubscriber&amp;gt; subscriber) { [subscriber sendNext:letters]; [subscriber sendNext:numbers]; [subscriber sendCompleted]; return nil; }]; //flatten主要是打平，降维  //flatten的时候，创建了一个新的signal，在新的signal里面监听了信号数组，即  /*[RACSignal createSignal:^ RACDisposable * (id&amp;lt;RACSubscriber&amp;gt; subscriber) { [signalOfSignals subscribeNext:^(id x) { addSignal(signal); }]; }]; addSignal() { [letters subscribeNext:^(NSString *x) { [subscriber sendNext:x]; }]; } */ RACSignal *flattened = [signalOfSignals flatten]; // Outputs: A 1 B C 2  [flattened subscribeNext:^(NSString *x) { NSLog(@&amp;#34;%@&amp;#34;, x); }]; //letters信号sendNext就会触发底层的subscribeNext  //而底层中subscribeNext就会调用flattened的subscriber  //最终就会触发[flattened subscribeNext:^(id x) {}];  [letters sendNext:@&amp;#34;A&amp;#34;]; [numbers sendNext:@&amp;#34;1&amp;#34;]; [letters sendNext:@&amp;#34;B&amp;#34;]; [letters sendNext:@&amp;#34;C&amp;#34;]; [numbers sendNext:@&amp;#34;2&amp;#34;]; } merge - (void)mergeDemo { RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) { [subscriber sendNext:@&amp;#34;signalA&amp;#34;]; return nil; }]; RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) { [subscriber sendNext:@&amp;#34;signalB&amp;#34;]; return nil; }]; //signalA merge signalB 产生一个新的信号mergeSignal  RACSignal *mergeSignal = [signalA merge:signalB]; //新的信号mergeSignal通过subscribeNext创建监听者。  [mergeSignal subscribeNext:^(id x) { NSLog(@&amp;#34;%@&amp;#34;, x); } error:^(NSError *error) { NSLog(@&amp;#34;%@&amp;#34;, error.</description>
    </item>
    
    <item>
      <title>ReactiveCocoa代码浅析&lt;一&gt;</title>
      <link>http://huanghg.github.io/posts/20191230reactivecocoa1/</link>
      <pubDate>Mon, 30 Dec 2019 17:53:27 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20191230reactivecocoa1/</guid>
      <description>RACStream 在ReactiveCocoa世界里面，万物皆为Stream，RACSignal和RACSequence都继承于RACStream，声明了一些抽象方法由子类去实现。
@implementation RACStream ... #pragma mark Abstract methods  + (instancetype)empty { return nil; } - (instancetype)bind:(RACStreamBindBlock (^)(void))block { return nil; } + (instancetype)return:(id)value { return nil; } - (instancetype)concat:(RACStream *)stream { return nil; } - (instancetype)zipWith:(RACStream *)stream { return nil; } ... @end 也提供很多底层的操作方法。下面列举了一些常用的方法，更多方法请见RACStream.m，后续会有专题讲解部分的方法，别看这么多方法，其实只要掌握里面的原理，会发现有很多相似的地方。所谓万变不离其宗，就是这个理。
@implementation RACStream (Operations) ... - (instancetype)flattenMap:(RACStream * (^)(id value))block { Class class = self.class; return [[self bind:^{ return ^(id value, BOOL *stop) { id stream = block(value) ?</description>
    </item>
    
  </channel>
</rss>