<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>藏经阁 on 拾忆</title>
    <link>http://huanghg.github.io/categories/%E8%97%8F%E7%BB%8F%E9%98%81/</link>
    <description>Recent content in 藏经阁 on 拾忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 03 Mar 2020 11:59:58 +0800</lastBuildDate>
    
	<atom:link href="http://huanghg.github.io/categories/%E8%97%8F%E7%BB%8F%E9%98%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>移动开发概述</title>
      <link>http://huanghg.github.io/posts/20200303appfactory/</link>
      <pubDate>Tue, 03 Mar 2020 11:59:58 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20200303appfactory/</guid>
      <description></description>
    </item>
    
    <item>
      <title>团队建设之夺路狂奔</title>
      <link>http://huanghg.github.io/posts/20191115wintershare/</link>
      <pubDate>Sun, 17 Nov 2019 09:44:02 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20191115wintershare/</guid>
      <description>程邵非(Winter) 程邵非(Winter)何许人也？
他自己在分享开篇，做了个简单的自我介绍
首先让我们看看他的光鲜履历
微软亚洲工程院-&amp;gt;盛大创新院-&amp;gt;阿里巴巴（手机淘宝前端leader-&amp;gt;淘宝终端架构leader）
短短一句话，但是这其中分量可不轻
由衷感慨到牛逼的人不需要过多修饰
想了解他更多，请点击任意门
团队与公司的关系 Winter在课件中提出了以上的需求模型，清晰地阐述了员工，团队，公司之间的需求关系
员工和公司是一个双赢的关系，员工组成团队，团队铸造公司
 员工通过劳动换取相应的薪酬 在公司提供资源的情况，员工可以获得技术的提升 员工给公司带来业务输出的同时，公司无形中提供了平台效应  了解了员工和公司的供需关系之后，可以更好的给自己定位
团队建设 给我收获最多的，印象最深刻的是团队的发展建设
之前没有很明确的团队发展规划与方向，但是通过Winter的分享，团队的发展建设其实是有必经之路的
初期：支撑快速迭代的节奏，高效高质量完成大量需求 虽然短短一句话，但是却涵盖了很多学问
万丈高楼平地起，首先需要一个很扎实的根基，其次组件化，模块化以致起到最大的复用
 搭建基础服务设施平台  文档平台 CMS CI持续化构建等  脚本，工具  CodeSnippet Xcode extension  辅助系统
 埋点 日志系统 JSBridge 调试面板  封装基础库
 网络库：失败重试，请求复用 数据存储：规范存储  UI组件化（UI库等）
 业务模块
 底层库：管理导航堆栈 模块与模块间的消息通信 路由    服务端，客户端，前端因特性的差异，所以要解决的问题也是不一样的
 服务端：解决大量用户访问带来的复杂性，考验服务端的分发，抗压能力 客户端：解决软件需求规模带来的复杂性，考验组件化，模块化，隔离耦合 前端：解决大量页面需求带来的重复劳动，考验模块化，运营配置   中期：追求性能上的提升 这对技术有更高层次的要求，可能要涉及到其他端的专业知识（服务端，客户端，前端）
了解了各端的特性，才能知道各端如何运作，之间如何衔接，以及问题的最大的瓶颈在哪里等等
 性能监控</description>
    </item>
    
    <item>
      <title>浅谈HTTP，HTTPS</title>
      <link>http://huanghg.github.io/posts/briefhttps/</link>
      <pubDate>Wed, 06 Nov 2019 17:59:05 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/briefhttps/</guid>
      <description>来自网络
概述 HTTP，HTTPS是既陌生，又熟悉的两个协议
熟悉，是因为我们不管畅游互联网，还是开发过程中，都会接触到的
陌生，是因为我们很多都只是知道可以通过HTTP，HTTPS访问网站，请求后台接口。但是对底层原理并不是很熟悉（当然可能只是我不熟悉哈）
他们的本质是定义了一个客户端和服务器之间数据传输的一个协议
想必很多童鞋都或多或少都了解过，这篇文章的初衷
 一是在让自己再重新梳理，加深印象 二是想抛砖引玉，如有不正确的地方，也欢迎大家及时指正  HTTP 在探讨HTTP之前，我们先看看一个生活场景&amp;ndash;写信
小明和小红异地恋，相距甚远，只能通过写信的方式，互诉相思之情 想必大家都写过信（这里貌似暴露了年龄），写信的时候我们会有个信封，由信封包着书信 在信封上，我们会写明寄信人姓名，寄信人的地址，收信人的姓名，收信人的地址，邮编 邮差根据这些信息就可以正确地把信送到收信人手上了 就这样过了许久的浪漫岁月，但好景不长 暗恋小红已久的小黄，知道他们两一直在以书信来往 在某一天看了小明对小红的情书以后，脑海突然闪过了一个邪恶的念头，小黄决定篡改小明书信内容 在信中说了小红的坏话，导致小红和小明关系紧张  通过上述列子，我们可以把发送HTTP请求类比成送信。其中邮编好比服务器ip，可以快速定位目标大致地址，寄信人的地址好比API路径，收信人的姓名好比具体的服务接口，收信人信息好比客户端信息
报文来自网络 在HTTP时代，数据都是明文传输的。当然明文传输就会有以上的几大风险：
 窃听风险（小黄可以看到小明小红的书信内容） 篡改风险（小黄可以修改小明小红的书信内容） 冒充风险（小黄冒充小明辱骂小红）  为了解决以上三种风险，HTTPS应运而生。 那什么是HTTPS呢？下面就让我们聊聊HTTPS
HTTPS 来自网络 &amp;gt; HTTPS(全称：Hyper Text Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版
这个锁就是SSL/TSL协议，那SSL/TSL协议又是怎么解决窃听风险，篡改风险，冒充风险的呢。
下面我们还是以写信为例
解决窃听风险 小明为了缓解他俩的关系，千里迢迢飞过去找小红，然后当面跟小红解释清楚 并且跟小红商量好一个&amp;quot;规则&amp;quot;，小明以这个&amp;quot;规则&amp;quot;把书信内容打乱或者混淆 小红用这个&amp;quot;规则&amp;quot;恢复书信内容。  这个“规则”就是我们平时所说的密钥
 这个行为就是对称加密，对称加密可以解决窃听风险
 通过对称加密，他们又过了一段甜蜜光阴，但好景又不长 小黄去小明家里，无意中发现了&amp;quot;规则&amp;quot;，于是乎小黄用规则让书信内容一览无遗 然后篡改了书信内容，用同样的规则打乱或混淆。他们俩关系再陷入紧张 小明不得已又飞过去跟小红澄清&amp;quot;规则&amp;quot;可能已经泄漏了,&amp;quot;固定的对称密钥&amp;quot;终究不安全 于是乎他又想到另外一个好方法 小明就打电话给小红跟她说，以后每次写信之前，小明都会打电话给小红并告诉小红一个&amp;quot;随机数&amp;quot;, 然后由小红再告诉小明她的一个&amp;quot;随机数&amp;quot;，最终的&amp;quot;规则&amp;quot;由这两个&amp;quot;随机数&amp;quot;生成。 此次的书信内容就由这个&amp;quot;密钥&amp;quot;加密与解密。这样&amp;quot;密钥&amp;quot;每次都是最新的   此举称为协商密钥，密钥并不是一成不变的，也不会写死在某个地方，而是每次通信前协商好的
 解决冒充风险 小黄根据之前的规则，无法复用书信内容，索性就伪造了一份 在信中说明了临时更改了规则，尽量消除小红的疑惑，小红慢慢信以为真 久而久之，书信内容越来越离谱，关系再次恶化 于是小明怒飞过去，看了伪造的书信，看到潦草的字迹，又想到另外一个方法 小明和小红互相收下了对方的&amp;quot;字迹&amp;quot;，下次收到书信时就跟字迹对比，这样就知道是不是对方   此举称为交换凭证，可以解决冒充风险</description>
    </item>
    
  </channel>
</rss>