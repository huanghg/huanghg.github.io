<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>响应式编程系列 on 拾忆</title>
    <link>http://huanghg.github.io/categories/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/</link>
    <description>Recent content in 响应式编程系列 on 拾忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 30 Dec 2019 17:56:32 +0800</lastBuildDate>
    
	<atom:link href="http://huanghg.github.io/categories/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ReactiveCocoa代码浅析&lt;二&gt;</title>
      <link>http://huanghg.github.io/posts/20191230reactivecocoa2/</link>
      <pubDate>Mon, 30 Dec 2019 17:56:32 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20191230reactivecocoa2/</guid>
      <description>看merge之前，我们先看一下flatten
flatten //以下是merge另外的一种实现 - (void)flattenDemo { RACSubject *letters = [RACSubject subject]; RACSubject *numbers = [RACSubject subject]; //创建信号数组，当flattened信号subscribeNext的时候，会在其内部触发signalOfSignals的subscribeNext  //当[subscriber sendNext:letters];时，会把letters这个signal传递到里面去，会添加到flattened的一个数组中，并建立letters的subscribeNext  RACSignal *signalOfSignals = [RACSignal createSignal:^ RACDisposable * (id&amp;lt;RACSubscriber&amp;gt; subscriber) { [subscriber sendNext:letters]; [subscriber sendNext:numbers]; [subscriber sendCompleted]; return nil; }]; //flatten主要是打平，降维  //flatten的时候，创建了一个新的signal，在新的signal里面监听了信号数组，即  /*[RACSignal createSignal:^ RACDisposable * (id&amp;lt;RACSubscriber&amp;gt; subscriber) { [signalOfSignals subscribeNext:^(id x) { addSignal(signal); }]; }]; addSignal() { [letters subscribeNext:^(NSString *x) { [subscriber sendNext:x]; }]; } */ RACSignal *flattened = [signalOfSignals flatten]; // Outputs: A 1 B C 2  [flattened subscribeNext:^(NSString *x) { NSLog(@&amp;#34;%@&amp;#34;, x); }]; //letters信号sendNext就会触发底层的subscribeNext  //而底层中subscribeNext就会调用flattened的subscriber  //最终就会触发[flattened subscribeNext:^(id x) {}];  [letters sendNext:@&amp;#34;A&amp;#34;]; [numbers sendNext:@&amp;#34;1&amp;#34;]; [letters sendNext:@&amp;#34;B&amp;#34;]; [letters sendNext:@&amp;#34;C&amp;#34;]; [numbers sendNext:@&amp;#34;2&amp;#34;]; } merge - (void)mergeDemo { RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) { [subscriber sendNext:@&amp;#34;signalA&amp;#34;]; return nil; }]; RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id&amp;lt;RACSubscriber&amp;gt; subscriber) { [subscriber sendNext:@&amp;#34;signalB&amp;#34;]; return nil; }]; //signalA merge signalB 产生一个新的信号mergeSignal  RACSignal *mergeSignal = [signalA merge:signalB]; //新的信号mergeSignal通过subscribeNext创建监听者。  [mergeSignal subscribeNext:^(id x) { NSLog(@&amp;#34;%@&amp;#34;, x); } error:^(NSError *error) { NSLog(@&amp;#34;%@&amp;#34;, error.</description>
    </item>
    
    <item>
      <title>ReactiveCocoa代码浅析&lt;一&gt;</title>
      <link>http://huanghg.github.io/posts/20191230reactivecocoa1/</link>
      <pubDate>Mon, 30 Dec 2019 17:53:27 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20191230reactivecocoa1/</guid>
      <description>RACStream 在ReactiveCocoa世界里面，万物皆为Stream，RACSignal和RACSequence都继承于RACStream，声明了一些抽象方法由子类去实现。
@implementation RACStream ... #pragma mark Abstract methods  + (instancetype)empty { return nil; } - (instancetype)bind:(RACStreamBindBlock (^)(void))block { return nil; } + (instancetype)return:(id)value { return nil; } - (instancetype)concat:(RACStream *)stream { return nil; } - (instancetype)zipWith:(RACStream *)stream { return nil; } ... @end 也提供很多底层的操作方法。下面列举了一些常用的方法，更多方法请见RACStream.m，后续会有专题讲解部分的方法，别看这么多方法，其实只要掌握里面的原理，会发现有很多相似的地方。所谓万变不离其宗，就是这个理。
@implementation RACStream (Operations) ... - (instancetype)flattenMap:(RACStream * (^)(id value))block { Class class = self.class; return [[self bind:^{ return ^(id value, BOOL *stop) { id stream = block(value) ?</description>
    </item>
    
    <item>
      <title>漫谈面向对象（OOP）</title>
      <link>http://huanghg.github.io/posts/20191230oop/</link>
      <pubDate>Mon, 30 Dec 2019 17:38:37 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20191230oop/</guid>
      <description>简介 ​	相传盘古开天辟地，举手顶天，双脚踏地，撑开混沌天地。最后体力不支，身躯化为山脉，血液演变成河流。混沌世界由此开启。在现实世界里，万物皆对象，万物拥有属性，可执行动作
​	二十世纪末，二十一世纪初，出现了一种新物种——程序猿，一种特殊的物种，通过0和1构建了一个虚拟的世界。将世间万物抽象成各种各样的对象，对象包含属性和方法
​	单一文化会让人类发展历程停滞不前。人类历史齿轮之所以可以快速往前行驶，靠的是文化间相互碰撞。中国古代有百家争鸣，外国有文艺复兴
​	程序世界亦然。面向对象（OOP）有三个特性，继承，封装，多态。这三大特性稳稳地支撑面向对象，让面向对象一度成为程序猿编程首选范式。所谓路遥知马力，用久了，面向对象的诟病也相继出现了
继承 继承，定义子类继承于父类，共性放在父类，子类负责差异化。这带来了一定的便利，可以起到很好的复用效果，相同的代码只需要在父类写一份，所有的子类可以添加新的方法，也可以重写父类的方法，以达到子类间相不影响
**风险：**但是父类和子类的相互影响是也是bug潜伏的有利条件
解决方案：减少继承的层级，通过组合来代替继承
封装 封装，无论是通过声明属性方法的作用域，还是通过头文件的方式屏蔽内部实现。其实都是利用了封装的特性，把外在不关心的，不想让外部修改的，封装在类的内部，只对外部暴露部分属性，以及部分接口供配置或者修改。符合设计模式里面的最少知道原则
**风险：**但是对外暴露属性，无疑是增大了属性的作用域，也就是可以修改的地方多了，就不纯粹了，因为属性被修改导致的bug的风险就高了
解决方案：尽量少对外暴露属性，可以通过方法的方式供外部配置或者修改属性
**风险：**另外对外暴露方法，如果不是值传递，而是指针传递。外部也持有这个对象指针，也就是外部也可以修改这个对象
解决方案：是方法内部对对象指针进行深拷贝
多态 多态不是面向对象的独有特性。多态可以分为编译时多态和运行时多态。编译时多态大多体现在接口上的多态，比如同样是构造方法，但是可以通过不一样的参数列表，来达到实例化不同对象的效果。运行时多态建立在继承特性上，对外接口接收的是父类，同一个方法，当传进去的具体实体类不一样，会产生不一样的结果，而这个具体实体类，需要在运行时才知道是什么类型
面向对象中，很多问题终究在于属性的作用域太广，作用域广，被修改的地方就广，bug很多时候就这么出现了
这时候函数式编程就凸显了优势。函数式编程主张减少对外部的引用，函数是一等公民，跟基础类型的一样，可以当作参数一样传递，也可以返回一个函数
参考 知海匠库：面向对象编程不如函数式编程？
函数式编程初探</description>
    </item>
    
  </channel>
</rss>