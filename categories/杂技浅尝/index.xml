<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂技浅尝 on 拾忆</title>
    <link>http://huanghg.github.io/categories/%E6%9D%82%E6%8A%80%E6%B5%85%E5%B0%9D/</link>
    <description>Recent content in 杂技浅尝 on 拾忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 09 Dec 2019 21:16:22 +0800</lastBuildDate>
    
	<atom:link href="http://huanghg.github.io/categories/%E6%9D%82%E6%8A%80%E6%B5%85%E5%B0%9D/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>实现高逼格的Popup队列管理中心</title>
      <link>http://huanghg.github.io/posts/20191209popupcenter/</link>
      <pubDate>Mon, 09 Dec 2019 21:16:22 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20191209popupcenter/</guid>
      <description>背景 在平时的开发中，会有很多弹窗的需求，尤其是在首页（版本升级，运营活动）等等
但是很多时候都是由不同的童鞋开发，而且基本都是依赖于网络接口，所以先后顺序都是无法保证
这就导致一个后果，弹窗泛滥成灾
另外我们可以发现，系统自带的AlertView是有队列管理的，总是消失了一个弹窗以后，再显示下一个弹窗
于是便有了这个Popup队列管理中心
雏形 在开发前，我们可以大概的设想一下这个的设计雏形
有一个Popup管理类，由这个类维护一个数组，外部调用该类的API将弹窗添加到这个数组中
外部在消失弹窗的时候，调用该类的API将该弹窗从这个数组中移除
最后从队列中取出下一次弹窗进行展示
以上方式有几个弊端
 接入方式过于复杂
 使用者需要关心的太多了，如果哪个童鞋在消失自己的弹窗的时候，忘记了从队列中移除，并且没有从队列中取出下一个弹窗进行展示，那队列中的其他弹窗都将永不见天日
  原理 为了解决以上问题，该项目运用了几个Objective-C底层的原理，下面将一一剖析
为了不让使用者在消失自己的弹窗后，需要手动从队列中移除，并且唤醒下一个弹窗
最开始我想到的是定时任务，但是后面觉得定时任务不是很优雅，后面选择了监听Runloop运行状态变化
Runloop - (instancetype)init { self = [super init]; if (self) { //创建一个以和屏幕刷新率相同的频率的定时器 _displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(wakeup)]; [_displayLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes]; dispatch_async(dispatch_get_main_queue(), ^{ //添加Runloop监听者 [self addRunloopObserver]; }); } return self; } - (void)addRunloopObserver { //获取当前runloop CFRunLoopRef runloop = CFRunLoopGetCurrent(); //创建context CFRunLoopObserverContext context = {0, (__bridge void *)self, &amp;amp;CFRetain, &amp;amp;CFRelease, NULL}; //创建runloop监听者 static CFRunLoopObserverRef defaultModeObserver; /*其中runloop的状态有如下几种，这里监听的是kCFRunLoopBeforeWaiting kCFRunLoopEntry = (1UL &amp;lt;&amp;lt; 0), kCFRunLoopBeforeTimers = (1UL &amp;lt;&amp;lt; 1), kCFRunLoopBeforeSources = (1UL &amp;lt;&amp;lt; 2), kCFRunLoopBeforeWaiting = (1UL &amp;lt;&amp;lt; 5), kCFRunLoopAfterWaiting = (1UL &amp;lt;&amp;lt; 6), kCFRunLoopExit = (1UL &amp;lt;&amp;lt; 7), kCFRunLoopAllActivities = 0x0FFFFFFFU */ defaultModeObserver = CFRunLoopObserverCreate(kCFAllocatorDefault, kCFRunLoopBeforeWaiting, YES, 0, &amp;amp;callback, &amp;amp;context); //为当前runloop添加runloop监听者 CFRunLoopAddObserver(runloop, defaultModeObserver, kCFRunLoopCommonModes); CFRelease(defaultModeObserver); } void callback(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info) { //Runloop 回调，在这里面可以管理Popup队列 }  截止，就完成了利用Runloop取代定时任务，对Popup队列进行定时管理</description>
    </item>
    
    <item>
      <title>Protobuf的日常使用</title>
      <link>http://huanghg.github.io/posts/20191127protobuf/</link>
      <pubDate>Wed, 27 Nov 2019 18:57:50 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/20191127protobuf/</guid>
      <description>简述 Protobuf是一种由谷歌开发的，通过proto协议约束的数据格式，详情请见官网
协议 syntax = &amp;quot;proto3&amp;quot;; package xxxx; option objc_class_prefix = &amp;quot;xxx&amp;quot;; message SearchRequest { string query = 1; int32 page_number = 2; int32 result_per_page = 3; }  上面是一个简易的protobuf协议，其中有两点需要注意⚠️:
 第一行一定是显示的声明proto对应的版本，如果没有显示声明，默认是“proto2”
 如果项目中，有多个pb协议，那么这些pb协议之间可能会有相同的定义，比如错误信息等。java等通过packge声明包名区分，但是package对Objective-C不生效，此时需要通过objc_class_prefix给生成类名带上前缀
  优点  Protobuf数据格式的数据是以二进制方式传输的，数据量相对XML，JSON等数据格式会小很多倍，所以传输速度也会快很多 接收到Protobuf数据格式的数据后，需要对其反序列化，生成对应的模型，反序列化的过程效率高于XML数据格式  生成编程语言代码 Protobuf支持生成多种编程语言代码，前提是装了protobuf的编译器
For C++, the compiler generates a .h and .cc file from each .proto, with a class for each message type described in your file. For Java, the compiler generates a .</description>
    </item>
    
    <item>
      <title>Github Pages &amp; Gitalk 添加评论功能</title>
      <link>http://huanghg.github.io/posts/ghcomment/</link>
      <pubDate>Thu, 07 Nov 2019 17:28:26 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/ghcomment/</guid>
      <description>背景 评论是博客中一个必要的功能，除非你想写个博客，然后不允许别人逼逼那种。
前两天刚搭好自己的Github主页，所以迫不及待就想弄个评论功能。网上推荐蛮多评论插件了，我最终选择的是Gitalk，在线示例请见链接
Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。让我最终选择他的是因为Gitalk 使用的是Github Issue 的API，不依赖任何第三方平台，只要Github不倒闭，评论系统就不会出问题。当然如果Github倒闭，Github主页就不复存在了。
搭建 创建Github OAuth Application 这里面要特别说明一下，我第一次接触的时候，一直以为是GitHub App，页面如下图：
前面的信息都挺顺利的，哒哒哒敲完了，点击Create GitHub App的时候，提示途中标红的Webhook URL，这就一脸懵逼了。然后网上各种搜，最后发现创建应该是Github OAuth Application。如下图：
其中Client ID和Client Secret后续会用到。
添加gitalk.html模板 从网上拷贝了一份见下方, 注意这份模板是有问题的！！！本身添加评论功能是很简单的，但是这份代码增加集成了难度，下文会详细讲解。
{{ if .Site.Params.enableGitalk }} &amp;lt;div id=&amp;quot;gitalk-container/&amp;quot; style=&amp;quot;border:0&amp;quot; &amp;gt;&amp;lt;/div&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://unpkg.com/gitalk/dist/gitalk.css/&amp;quot; style=&amp;quot;border:0&amp;quot; &amp;gt; &amp;lt;script src=&amp;quot;https://unpkg.com/gitalk/dist/gitalk.min.js/&amp;quot; style=&amp;quot;border:0&amp;quot; &amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; const gitalk = new Gitalk({ clientID: &#39;{{ .Site.Params.Gitalk.clientID }}&#39;, clientSecret: &#39;{{ .Site.Params.Gitalk.clientSecret }}&#39;, repo: &#39;{{ .Site.Params.Gitalk.repo }}&#39;, owner: &#39;{{ .Site.Params.Gitalk.owner }}&#39;, admin: [&#39;{{ .</description>
    </item>
    
    <item>
      <title>使用Hugo &amp; GitHub Pages 制作静态个人博客</title>
      <link>http://huanghg.github.io/posts/blog/</link>
      <pubDate>Wed, 06 Nov 2019 16:58:13 +0800</pubDate>
      
      <guid>http://huanghg.github.io/posts/blog/</guid>
      <description>背景 最近在着手搭建自己的个人博客，博客的好处想必大家都知道好处有很多，下面列举了几条仅供大家参考：
 沉淀所学知识，搭建知识体系。（这是最重要的） 千里马常有，而伯乐也需要一个平台去认识你。 结识志同道合之士 于智者，抛砖引玉；于惑者，授业解惑  但是在搭建的过程中，遇到很多坑，特此写这篇文章记录一下，希望可以帮助到其他童鞋。
搭建个人博客方法有很多，最简单的方法，只需要fork一个现有的博客，并将工程名修改为{github-username}.github.io，然后替换自己的博文既可。虽然也可以达到效果，但是体验不到自己动手搭建的乐趣。
下面就介绍一下Hugo &amp;amp; GitHub Pages搭建的过程。
简介 Hugo  Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
 hugo的安装流程请见中文官网 或英文官网，此处就做不详细介绍。这里更多的想要描述一下hugo的用法，及相关文件夹的功能，以及如何配置hugo。
➜ `GitHub` hugo new site `blogname` //blogname任君喜欢 Congratulations! Your new Hugo site is created in /Users/haiguanghuang/Documents/Github/blogname. Just a few more steps and you&#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the &amp;quot;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;quot; command.</description>
    </item>
    
  </channel>
</rss>